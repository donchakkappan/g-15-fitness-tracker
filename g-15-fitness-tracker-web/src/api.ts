/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Fitness Tracker API
 * API documentation for the Fitness Tracker Web Application
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as isomorphicFetch from "isomorphic-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "/".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = isomorphicFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
}

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name = "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface UserLogin
 */
export interface UserLogin {
    /**
     * 
     * @type {string}
     * @memberof UserLogin
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof UserLogin
     */
    password: string;
}
/**
 * 
 * @export
 * @interface UserProfileUpdate
 */
export interface UserProfileUpdate {
    /**
     * 
     * @type {string}
     * @memberof UserProfileUpdate
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof UserProfileUpdate
     */
    lastName: string;
}
/**
 * 
 * @export
 * @interface UserRegistration
 */
export interface UserRegistration {
    /**
     * 
     * @type {string}
     * @memberof UserRegistration
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof UserRegistration
     */
    password: string;
}
/**
 * 
 * @export
 * @interface WorkoutLog
 */
export interface WorkoutLog {
    /**
     * 
     * @type {string}
     * @memberof WorkoutLog
     */
    exerciseType: string;
    /**
     * 
     * @type {number}
     * @memberof WorkoutLog
     */
    duration: number;
    /**
     * 
     * @type {number}
     * @memberof WorkoutLog
     */
    distance?: number;
    /**
     * 
     * @type {number}
     * @memberof WorkoutLog
     */
    sets?: number;
    /**
     * 
     * @type {number}
     * @memberof WorkoutLog
     */
    reps?: number;
}
/**
 * 
 * @export
 * @interface WorkoutUpdate
 */
export interface WorkoutUpdate {
    /**
     * 
     * @type {string}
     * @memberof WorkoutUpdate
     */
    exerciseType?: string;
    /**
     * 
     * @type {number}
     * @memberof WorkoutUpdate
     */
    duration?: number;
    /**
     * 
     * @type {number}
     * @memberof WorkoutUpdate
     */
    distance?: number;
    /**
     * 
     * @type {number}
     * @memberof WorkoutUpdate
     */
    sets?: number;
    /**
     * 
     * @type {number}
     * @memberof WorkoutUpdate
     */
    reps?: number;
}
/**
 * DefaultApi - fetch parameter creator
 * @export
 */
export const DefaultApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the profile information of the authenticated user.
         * @summary Get User Profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersGet(options: any = {}): FetchArgs {
            const localVarPath = `/api/users`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Logs in an existing user.
         * @summary Login
         * @param {UserLogin} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersPost(body: UserLogin, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling apiUsersPost.');
            }
            const localVarPath = `/api/users`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UserLogin" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the profile information of the authenticated user.
         * @summary Update User Profile
         * @param {UserProfileUpdate} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersPut(body: UserProfileUpdate, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling apiUsersPut.');
            }
            const localVarPath = `/api/users`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UserProfileUpdate" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the workouts logged by the authenticated user.
         * @summary Get Workouts by User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkoutsGet(options: any = {}): FetchArgs {
            const localVarPath = `/api/workouts`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Logs a new workout for the authenticated user.
         * @summary Log Workout
         * @param {WorkoutLog} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkoutsPost(body: WorkoutLog, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling apiWorkoutsPost.');
            }
            const localVarPath = `/api/workouts`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"WorkoutLog" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the details of a workout logged by the authenticated user.
         * @summary Update Workout
         * @param {WorkoutUpdate} body 
         * @param {string} workoutId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkoutsPut(body: WorkoutUpdate, workoutId: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling apiWorkoutsPut.');
            }
            // verify required parameter 'workoutId' is not null or undefined
            if (workoutId === null || workoutId === undefined) {
                throw new RequiredError('workoutId','Required parameter workoutId was null or undefined when calling apiWorkoutsPut.');
            }
            const localVarPath = `/api/workouts`
                .replace(`{${"workoutId"}}`, encodeURIComponent(String(workoutId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"WorkoutUpdate" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a workout logged by the authenticated user.
         * @summary Delete Workout
         * @param {string} workoutId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkoutsWorkoutIdDelete(workoutId: string, options: any = {}): FetchArgs {
            // verify required parameter 'workoutId' is not null or undefined
            if (workoutId === null || workoutId === undefined) {
                throw new RequiredError('workoutId','Required parameter workoutId was null or undefined when calling apiWorkoutsWorkoutIdDelete.');
            }
            const localVarPath = `/api/workouts/{workoutId}`
                .replace(`{${"workoutId"}}`, encodeURIComponent(String(workoutId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a specific workout by its ID.
         * @summary Get Workout by ID
         * @param {string} workoutId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkoutsWorkoutIdGet(workoutId: string, options: any = {}): FetchArgs {
            // verify required parameter 'workoutId' is not null or undefined
            if (workoutId === null || workoutId === undefined) {
                throw new RequiredError('workoutId','Required parameter workoutId was null or undefined when calling apiWorkoutsWorkoutIdGet.');
            }
            const localVarPath = `/api/workouts/{workoutId}`
                .replace(`{${"workoutId"}}`, encodeURIComponent(String(workoutId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Retrieves the profile information of the authenticated user.
         * @summary Get User Profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).apiUsersGet(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Logs in an existing user.
         * @summary Login
         * @param {UserLogin} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersPost(body: UserLogin, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).apiUsersPost(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Updates the profile information of the authenticated user.
         * @summary Update User Profile
         * @param {UserProfileUpdate} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersPut(body: UserProfileUpdate, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).apiUsersPut(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves the workouts logged by the authenticated user.
         * @summary Get Workouts by User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkoutsGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).apiWorkoutsGet(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Logs a new workout for the authenticated user.
         * @summary Log Workout
         * @param {WorkoutLog} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkoutsPost(body: WorkoutLog, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).apiWorkoutsPost(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Updates the details of a workout logged by the authenticated user.
         * @summary Update Workout
         * @param {WorkoutUpdate} body 
         * @param {string} workoutId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkoutsPut(body: WorkoutUpdate, workoutId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).apiWorkoutsPut(body, workoutId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Deletes a workout logged by the authenticated user.
         * @summary Delete Workout
         * @param {string} workoutId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkoutsWorkoutIdDelete(workoutId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).apiWorkoutsWorkoutIdDelete(workoutId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a specific workout by its ID.
         * @summary Get Workout by ID
         * @param {string} workoutId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkoutsWorkoutIdGet(workoutId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).apiWorkoutsWorkoutIdGet(workoutId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Retrieves the profile information of the authenticated user.
         * @summary Get User Profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersGet(options?: any) {
            return DefaultApiFp(configuration).apiUsersGet(options)(fetch, basePath);
        },
        /**
         * Logs in an existing user.
         * @summary Login
         * @param {UserLogin} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersPost(body: UserLogin, options?: any) {
            return DefaultApiFp(configuration).apiUsersPost(body, options)(fetch, basePath);
        },
        /**
         * Updates the profile information of the authenticated user.
         * @summary Update User Profile
         * @param {UserProfileUpdate} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersPut(body: UserProfileUpdate, options?: any) {
            return DefaultApiFp(configuration).apiUsersPut(body, options)(fetch, basePath);
        },
        /**
         * Retrieves the workouts logged by the authenticated user.
         * @summary Get Workouts by User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkoutsGet(options?: any) {
            return DefaultApiFp(configuration).apiWorkoutsGet(options)(fetch, basePath);
        },
        /**
         * Logs a new workout for the authenticated user.
         * @summary Log Workout
         * @param {WorkoutLog} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkoutsPost(body: WorkoutLog, options?: any) {
            return DefaultApiFp(configuration).apiWorkoutsPost(body, options)(fetch, basePath);
        },
        /**
         * Updates the details of a workout logged by the authenticated user.
         * @summary Update Workout
         * @param {WorkoutUpdate} body 
         * @param {string} workoutId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkoutsPut(body: WorkoutUpdate, workoutId: string, options?: any) {
            return DefaultApiFp(configuration).apiWorkoutsPut(body, workoutId, options)(fetch, basePath);
        },
        /**
         * Deletes a workout logged by the authenticated user.
         * @summary Delete Workout
         * @param {string} workoutId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkoutsWorkoutIdDelete(workoutId: string, options?: any) {
            return DefaultApiFp(configuration).apiWorkoutsWorkoutIdDelete(workoutId, options)(fetch, basePath);
        },
        /**
         * Retrieves a specific workout by its ID.
         * @summary Get Workout by ID
         * @param {string} workoutId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWorkoutsWorkoutIdGet(workoutId: string, options?: any) {
            return DefaultApiFp(configuration).apiWorkoutsWorkoutIdGet(workoutId, options)(fetch, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Retrieves the profile information of the authenticated user.
     * @summary Get User Profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiUsersGet(options?: any) {
        return DefaultApiFp(this.configuration).apiUsersGet(options)(this.fetch, this.basePath);
    }

    /**
     * Logs in an existing user.
     * @summary Login
     * @param {UserLogin} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiUsersPost(body: UserLogin, options?: any) {
        return DefaultApiFp(this.configuration).apiUsersPost(body, options)(this.fetch, this.basePath);
    }

    /**
     * Updates the profile information of the authenticated user.
     * @summary Update User Profile
     * @param {UserProfileUpdate} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiUsersPut(body: UserProfileUpdate, options?: any) {
        return DefaultApiFp(this.configuration).apiUsersPut(body, options)(this.fetch, this.basePath);
    }

    /**
     * Retrieves the workouts logged by the authenticated user.
     * @summary Get Workouts by User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiWorkoutsGet(options?: any) {
        return DefaultApiFp(this.configuration).apiWorkoutsGet(options)(this.fetch, this.basePath);
    }

    /**
     * Logs a new workout for the authenticated user.
     * @summary Log Workout
     * @param {WorkoutLog} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiWorkoutsPost(body: WorkoutLog, options?: any) {
        return DefaultApiFp(this.configuration).apiWorkoutsPost(body, options)(this.fetch, this.basePath);
    }

    /**
     * Updates the details of a workout logged by the authenticated user.
     * @summary Update Workout
     * @param {WorkoutUpdate} body 
     * @param {string} workoutId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiWorkoutsPut(body: WorkoutUpdate, workoutId: string, options?: any) {
        return DefaultApiFp(this.configuration).apiWorkoutsPut(body, workoutId, options)(this.fetch, this.basePath);
    }

    /**
     * Deletes a workout logged by the authenticated user.
     * @summary Delete Workout
     * @param {string} workoutId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiWorkoutsWorkoutIdDelete(workoutId: string, options?: any) {
        return DefaultApiFp(this.configuration).apiWorkoutsWorkoutIdDelete(workoutId, options)(this.fetch, this.basePath);
    }

    /**
     * Retrieves a specific workout by its ID.
     * @summary Get Workout by ID
     * @param {string} workoutId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiWorkoutsWorkoutIdGet(workoutId: string, options?: any) {
        return DefaultApiFp(this.configuration).apiWorkoutsWorkoutIdGet(workoutId, options)(this.fetch, this.basePath);
    }

}
