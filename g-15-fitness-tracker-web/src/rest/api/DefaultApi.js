/*
 * Fitness Tracker API
 * API documentation for the Fitness Tracker Web Application
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.54
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import UserLogin from '../model/UserLogin';
import UserProfileUpdate from '../model/UserProfileUpdate';
import WorkoutLog from '../model/WorkoutLog';
import WorkoutUpdate from '../model/WorkoutUpdate';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the apiUsersGet operation.
     * @callback moduleapi/DefaultApi~apiUsersGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User Profile
     * Retrieves the profile information of the authenticated user.
     * @param {module:api/DefaultApi~apiUsersGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiUsersGet(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiUsersPost operation.
     * @callback moduleapi/DefaultApi~apiUsersPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Login
     * Logs in an existing user.
     * @param {module:model/UserLogin} body 
     * @param {module:api/DefaultApi~apiUsersPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiUsersPost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiUsersPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiUsersPut operation.
     * @callback moduleapi/DefaultApi~apiUsersPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update User Profile
     * Updates the profile information of the authenticated user.
     * @param {module:model/UserProfileUpdate} body 
     * @param {module:api/DefaultApi~apiUsersPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiUsersPut(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiUsersPut");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/users', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiWorkoutsGet operation.
     * @callback moduleapi/DefaultApi~apiWorkoutsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Workouts by User
     * Retrieves the workouts logged by the authenticated user.
     * @param {module:api/DefaultApi~apiWorkoutsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiWorkoutsGet(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/workouts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiWorkoutsPost operation.
     * @callback moduleapi/DefaultApi~apiWorkoutsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Log Workout
     * Logs a new workout for the authenticated user.
     * @param {module:model/WorkoutLog} body 
     * @param {module:api/DefaultApi~apiWorkoutsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiWorkoutsPost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiWorkoutsPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/workouts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiWorkoutsPut operation.
     * @callback moduleapi/DefaultApi~apiWorkoutsPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Workout
     * Updates the details of a workout logged by the authenticated user.
     * @param {module:model/WorkoutUpdate} body 
     * @param {String} workoutId 
     * @param {module:api/DefaultApi~apiWorkoutsPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiWorkoutsPut(body, workoutId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiWorkoutsPut");
      }
      // verify the required parameter 'workoutId' is set
      if (workoutId === undefined || workoutId === null) {
        throw new Error("Missing the required parameter 'workoutId' when calling apiWorkoutsPut");
      }

      let pathParams = {
        'workoutId': workoutId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/workouts', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiWorkoutsWorkoutIdDelete operation.
     * @callback moduleapi/DefaultApi~apiWorkoutsWorkoutIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Workout
     * Deletes a workout logged by the authenticated user.
     * @param {String} workoutId 
     * @param {module:api/DefaultApi~apiWorkoutsWorkoutIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiWorkoutsWorkoutIdDelete(workoutId, callback) {
      
      let postBody = null;
      // verify the required parameter 'workoutId' is set
      if (workoutId === undefined || workoutId === null) {
        throw new Error("Missing the required parameter 'workoutId' when calling apiWorkoutsWorkoutIdDelete");
      }

      let pathParams = {
        'workoutId': workoutId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/workouts/{workoutId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiWorkoutsWorkoutIdGet operation.
     * @callback moduleapi/DefaultApi~apiWorkoutsWorkoutIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Workout by ID
     * Retrieves a specific workout by its ID.
     * @param {String} workoutId 
     * @param {module:api/DefaultApi~apiWorkoutsWorkoutIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiWorkoutsWorkoutIdGet(workoutId, callback) {
      
      let postBody = null;
      // verify the required parameter 'workoutId' is set
      if (workoutId === undefined || workoutId === null) {
        throw new Error("Missing the required parameter 'workoutId' when calling apiWorkoutsWorkoutIdGet");
      }

      let pathParams = {
        'workoutId': workoutId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/workouts/{workoutId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}